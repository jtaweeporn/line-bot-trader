const { Client } = require('@line/bot-sdk');
const express = require('express');
const { Client, middleware } = require('@line/bot-sdk');

require('dotenv').config(); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå .env

const config = {
  channelAccessToken: process.env.CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.CHANNEL_SECRET,
};

const app = express();
const client = new Client(config);

// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ Webhook ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏ö error
app.post('/webhook', middleware(config), (req, res) => {
  console.log('üì• Webhook received:', JSON.stringify(req.body, null, 2)); // ‡∏î‡∏π event ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
  Promise
    .all(req.body.events.map(handleEvent))
    .then((result) => res.json(result))
    .catch((err) => {
      console.error('‚ùå Webhook handler error:', err); // log error
      res.status(500).end(); // ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤ error ‡πÉ‡∏´‡πâ LINE ‡∏£‡∏π‡πâ
    });
});

// ‚úÖ handleEvent = ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
function handleEvent(event) {
  if (event.type !== 'message' || event.message.type !== 'text') {
    return Promise.resolve(null); // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‚Üí ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö
  }

  // ‚úÖ ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  return client.replyMessage(event.replyToken, {
    type: 'text',
    text: '‚úÖ ‡∏ö‡∏≠‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö!',
  });
}

// ‚úÖ Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
const port = process.env.PORT || 3000;
app.get("/webhook", (req, res) => {
  res.status(200).send("Webhook alive - Render OK ‚úÖ");
});
// === ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô BTC ‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÜ ===
const { Client } = require('@line/bot-sdk');

const userId = 'U378e0720792b4f1e8f94738343a37864'; // <- ‡πÅ‡∏ó‡∏ô userId ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
const lineClient = new Client({
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
});

async function handleBTCNotify() {
  const now = new Date();
  const message = {
    to: userId,
    messages: [
      {
        type: 'text',
        text:
          `üîî BTC/USD\n` +
          `üïê Timeframe: 1H\n` +
          `üìà ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: Buy\n` +
          `üì¨ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${now.toLocaleString("th-TH", { timeZone: "Asia/Bangkok" })}`,
      },
    ],
  };

  try {
    await lineClient.pushMessage(message.to, message.messages);
    console.log("‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° BTC ‡πÅ‡∏•‡πâ‡∏ß");
  } catch (error) {
    console.error("‚ùå ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error);
  }
}

// === ‡πÄ‡∏û‡∏¥‡πà‡∏° route ‡πÉ‡∏´‡πâ CRON ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÑ‡∏î‡πâ ===
app.get('/cron/btc', async (req, res) => {
  await handleBTCNotify();
  res.send('‚úÖ BTC cron triggered');
});
app.listen(port, () => {
  console.log(`üöÄ Server is running on port ${port}`);
});
